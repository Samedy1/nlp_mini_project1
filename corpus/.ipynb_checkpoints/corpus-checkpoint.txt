Computer science is the study of computation, information, and automation.[1][2][3] Computer science spans theoretical disciplines (such as algorithms, theory of computation, and information theory) to applied disciplines (including the design and implementation of hardware and software).[4][5][6] Though more often considered an academic discipline, computer science is closely related to computer programming.[7]

Algorithms and data structures are central to computer science.[8] The theory of computation concerns abstract models of computation and general classes of problems that can be solved using them. The fields of cryptography and computer security involve studying the means for secure communication and for preventing security vulnerabilities. Computer graphics and computational geometry address the generation of images. Programming language theory considers different ways to describe computational processes, and database theory concerns the management of repositories of data. Human–computer interaction investigates the interfaces through which humans and computers interact, and software engineering focuses on the design and principles behind developing software. Areas such as operating systems, networks and embedded systems investigate the principles and design behind complex systems. Computer architecture describes the construction of computer components and computer-operated equipment. Artificial intelligence and machine learning aim to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, planning and learning found in humans and animals. Within artificial intelligence, computer vision aims to understand and process image and video data, while natural language processing aims to understand and process textual and linguistic data.

The fundamental concern of computer science is determining what can and cannot be automated.[2][9][3][10][11] The Turing Award is generally recognized as the highest distinction in computer science.

The earliest foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks such as the abacus have existed since antiquity, aiding in computations such as multiplication and division. Algorithms for performing computations have existed since antiquity, even before the development of sophisticated computing equipment.[17]

Wilhelm Schickard designed and constructed the first working mechanical calculator in 1623.[18] In 1673, Gottfried Leibniz demonstrated a digital mechanical calculator, called the Stepped Reckoner.[19] Leibniz may be considered the first computer scientist and information theorist, because of various reasons, including the fact that he documented the binary number system. In 1820, Thomas de Colmar launched the mechanical calculator industry[note 1] when he invented his simplified arithmometer, the first calculating machine strong enough and reliable enough to be used daily in an office environment. Charles Babbage started the design of the first automatic mechanical calculator, his Difference Engine, in 1822, which eventually gave him the idea of the first programmable mechanical calculator, his Analytical Engine.[20] He started developing this machine in 1834, and "in less than two years, he had sketched out many of the salient features of the modern computer".[21] "A crucial step was the adoption of a punched card system derived from the Jacquard loom"[21] making it infinitely programmable.[note 2] In 1843, during the translation of a French article on the Analytical Engine, Ada Lovelace wrote, in one of the many notes she included, an algorithm to compute the Bernoulli numbers, which is considered to be the first published algorithm ever specifically tailored for implementation on a computer.[22] Around 1885, Herman Hollerith invented the tabulator, which used punched cards to process statistical information; eventually his company became part of IBM. Following Babbage, although unaware of his earlier work, Percy Ludgate in 1909 published[23] the 2nd of the only two designs for mechanical analytical engines in history. In 1914, the Spanish engineer Leonardo Torres Quevedo published his Essays on Automatics,[24] and designed, inspired by Babbage, a theoretical electromechanical calculating machine which was to be controlled by a read-only program. The paper also introduced the idea of floating-point arithmetic.[25][26] In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, Torres presented in Paris the Electromechanical Arithmometer, a prototype that demonstrated the feasibility of an electromechanical analytical engine,[27] on which commands could be typed and the results printed automatically.[28] In 1937, one hundred years after Babbage's impossible dream, Howard Aiken convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business[29] to develop his giant programmable calculator, the ASCC/Harvard Mark I, based on Babbage's Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as "Babbage's dream come true".[30]

During the 1940s, with the development of new and more powerful computing machines such as the Atanasoff–Berry computer and ENIAC, the term computer came to refer to the machines rather than their human predecessors.[31] As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study computation in general. In 1945, IBM founded the Watson Scientific Computing Laboratory at Columbia University in New York City. The renovated fraternity house on Manhattan's West Side was IBM's first laboratory devoted to pure science. The lab is the forerunner of IBM's Research Division, which today operates research facilities around the world.[32] Ultimately, the close relationship between IBM and Columbia University was instrumental in the emergence of a new scientific discipline, with Columbia offering one of the first academic-credit courses in computer science in 1946.[33] Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.[7][34] The world's first computer science degree program, the Cambridge Diploma in Computer Science, began at the University of Cambridge Computer Laboratory in 1953. The first computer science department in the United States was formed at Purdue University in 1962.[35] Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.

Generally, the word 'science' refers to the study of principals and the computation of a particular concept. Like General Science or Social Science, Computer Science is the scientific study of a computer system. It represents the theoretical study as well as practical implementations of a computer system. It incorporates all information on hardware and software parts. From brief to detailed, each related concept of a computer system is explained in it. It describes each part and process held in a computer system covering all parts from the core to its advanced topics. It lets us know and learn about algorithms, processes, programs, data representation, and the method of computing the digital information. Its discipline introduces various algorithms and data structures, network designing, concepts of programming and modeling, and artificial intelligence. Computer Science foundations are covered from mathematics and engineering subjects that result in electronic circuit design techniques, techniques from probability and statistics, etc.

Computer Science relates and belongs to the family of five separate but interrelated disciplines, which are collectively known as the Discipline of Computing. These disciplines are separated, but interrelated means that although they cover different concepts for research, their objective of the study is computing, which is the same for each. These five disciplines are:

It is the study of computing, algorithms, and the fundamental ideas that guide computer systems. Both the theoretical and practical sides of computers are included. Data structures, algorithms, programming languages, artificial Intelligence, and computer graphics are just a few of the subjects that computer scientists' study. They create new algorithms and techniques to address complicated issues and progress computers.

It focuses on how information is managed and organized inside organizations using technology. It entails researching both the management and technical facets of information technology. Professionals in information systems analyze the information requirements of businesses or organizations, then build and execute the systems necessary to meet those requirements. They could be involved in building user interfaces, creating databases, or overseeing enterprise-wide information systems.

It focuses on practically using computer systems and technology to suit company goals. IT specialists concentrate on setting up, maintaining, and managing networks and computer systems. They ensure that networks, software, and hardware are correctly set up, protected, and maintained. IT professionals may also aid consumers with technical support and troubleshoot computer system problems.

It focuses on designing, developing, and maintaining software systems and applying engineering concepts to these processes. Software engineers create high-quality software products using organized processes and approaches. They analyze user requirements, develop code, build architectures, and test and manage software systems. Collaboration, project management, and a dedication to producing dependable and effective software solutions are all part of software engineering.

Even though each of these fields has a distinct area of study, they are all related to the larger topic of computers. Computer engineering provides the hardware foundation on which software systems run. Computer science provides the theoretical underpinnings and algorithms that drive software development. Information systems and information technology focus on the practical application of computing in organizational settings. Software engineering combines all these aspects to develop reliable and efficient software solutions.

The computing discipline is continually developing due to technological breakthroughs and our increasing reliance on computers in numerous facets of our life. It covers a wide range of job prospects and scientific fields. The subject of computing provides a broad and interesting range of study options, whether you're interested in building computer hardware, creating cutting-edge software, managing information systems, or ensuring IT infrastructure runs smoothly.

Associations and societies including IEEE-CS (the IEEE Computer Society), ACM (the Association for Computer Machinery), and AIS (the Association for Information Systems) have collaborated and working since 1991 in order to develop and enhance the taxonomy of these disciplines and guidelines for the educational institutions all over the globe which use these disciplines for research, postgraduate, and undergraduate programs.

A computer scientist is a person who researches and studies the theory of computation and design of software systems. As per the study, the fields of Computer Science are divided into two parts:

It emphasizes on the abstract concepts such as Computational complexity theory, Programming language theory, Human-computer interaction theory (deals with the usefulness, usability, and accessibility of a computer system), Computer Architecture, Computer Engineering, and so on.

This area investigates the study of computational issues and their inherent complexity. This method includes examining the resources required to deal with problems like time, space, and computing power.

This field investigates the design, implementation, and analysis of programming languages. It focuses on formal techniques, type systems, semantics, and linguistic characteristics.
Human-Computer Interaction Theory (HCI): HCI theory is concerned with the design and evaluation of computer systems with a major emphasis on the demands and experiences of users. It emphasizes the necessity of designing user-friendly interfaces and optimizing computer systems' usability, usefulness, and accessibility.
Computer Architecture: Computer architecture is a subfield of computer science concerned with the design and organization of computer systems. It entails researching and refining how the many components of a computer interact to complete tasks.

It deals with the practical implementation of computational science. Computational science refers to the computation and use of algorithmic techniques for modeling scientific data. It also emphasizes computer graphics and visualization for implementing real-world applications, networking, databases and information systems, practical knowledge of the operating system to become capable of tackling the system issues.

Complex scientific issues are addressed using simulations and algorithm development. This discipline consists of responsibilities like modeling actual events, running simulations, and analyzing data to draw inferences and forecast outcomes in various fields, including physics, chemistry, biology, and engineering.
Computer graphics and visualization: This area is involved with the design, editing, and rendering of pictures, animations, and other visible displays. It includes numerous technologies, including augmented reality, virtual reality, data visualization, and comparable methods.
Networking: The design, implementation, and administration of computer networks are the main topics of networking. It requires an awareness of security measures, network structures, and protocols.
Databases and Information Systems: Large volumes of data must be managed and organized in this discipline. It involves defining data models, planning and constructing database systems, and implementing effective data storage and retrieval methods.
Both these fields together complete the study of Computer Science because there may be some issues or points that can be better expressed when practical implementations are performed. Also, the theory remains temporary until understood practically.

It gave the notions and introduced the concept of 'binary number system' and 'stored program'. It was understood that we could represent the information in the form of zeros and ones and store them in the system.
Physics and Electrical Engineering: It stroked Boolean algebra's idea for circuit design, where it became possible to produce arbitrary outputs (false or true) by combining the inputs of electrical impulses to a circuit by Boolean algebra. It became possible to design a circuit with binary value inputs and get the desired combination of 0's and 1's as its output. Hence, the invention of the transistor, invention of optical, electronic, and magnetic media for the transmission and storage of information came into existence.
Management information systems: These systems are known as Data processing systems that describe the method of processing the data. It led to the notion and evolution of concepts such as fetching information, searching, sorting, databases, and GUIs (Graphical User Interfaces).

After various revolutions in the history of Computer Science and after the encompassment of the Computer Science degree, various new disciplines in the field of Computer Science were introduced. So, if there are aspirants of Computer Science, they must gain the deepest knowledge they can. All the aspirants should understand the specializations and disciplines of Computer Science effectively. Thus, there are following specialization areas for the students who are pursuing the Computer Science degree:

Bioinformatics brings together biology, computer science, and information technology. Computational approaches are utilized to analyze biological data and tackle biological issues. To analyze DNA sequences, protein structures, and biological networks, professionals in bioinformatics create algorithms and software tools. They support industries like genomics, proteomics, and drug discovery by gleaning valuable information from enormous biological datasets.

The applied mathematics subfield of computer science focuses on using mathematical ideas and techniques in real-world applications. It uses mathematical models, statistical analysis, and simulations to address complicated computer-related problems. Specialists in applied mathematics utilize algorithms and computational techniques to solve problems in computer graphics, optimization, data evaluation, and cryptography.

Computational Physics uses physics and computer science techniques to model and simulate physical systems. Computational physicists use mathematical models and algorithms to mimic physical events and carry out digital experiments. They contribute to disciplines including astrophysics, quantum mechanics, fluid dynamics, and material science by conducting simulations and analyzing the findings to acquire insights into intricate physical systems.

The microprogramming specialization focuses on low-level programming and the design of microprocessors and computer systems. Microprogrammers create the microcode that manages how computer processors function at the hardware level. They create microprograms that are effective and optimized to carry out instructions at the microarchitecture level. Specialists in microprogramming are essential for improving the functioning and performance of computer systems.

Networks and Administration specialization involves designing, implementing, and managing computer networks and systems. Computer networks, including their associated hardware, software, and protocols, are kept secure and in working order by network administrators. They set up networking hardware, keep track of network performance, and resolve network problems. Network and system administrators are essential to keeping an organization's infrastructure safe and dependable.

This Specialization focuses on designing and implementing computer systems, particularly the structure and organization of computer hardware and networks. Computer Architecture Networks students learn about processor design, memory systems, input/output devices, and network protocols. They learn how computer components interact and communicate to form efficient and reliable systems. Professionals in this field work on developing advanced computer architectures and optimizing network performance.

Cryptography is the study of secure communication and data security. Cryptographic algorithms and protocols must be designed and analyzed to protect the secrecy, integrity, and validity of information. Students specializing in cryptography study cryptographic protocols, safe key exchange, digital signatures, and encryption methods. They learn to create secure systems and safeguard confidential data from manipulation or unauthorized access. The security of digital communication and transactions is crucially dependent on cryptography experts.

Computer engineering is a field that incorporates components of both computer science and electrical engineering. It focuses on the creation of hardware and software for computer systems. Digital systems, microprocessors, embedded systems, and hardware-software integration are among the topics taught to computer engineering students. They acquire skills in circuit design, computer architecture, and system-level programming. Computer engineers work on developing and optimizing computer hardware, ensuring its compatibility and performance.

Web development includes the creation, design, and management of websites and web applications. It is the development of everything you view and interact with on the internet. Everything you see on a website, such as text, photos, and buttons, is constructed using various technology and computer languages. To bring these pieces to life, web developers employ tools and computer languages such as HTML, CSS, and JavaScript.

omputer Game Development is centered around the conception, programming, and production of computer games. Students who choose this specialization gain knowledge in various areas, including game design principles, game engines, graphics programming, and artificial intelligence techniques specifically designed for games. They get proficient in game testing, 3D modeling, animation, and software development. Creating compelling and pleasurable gaming experiences that satisfy the expanding expectations of the gaming business is the main goal of computer game creators.

The field of robotics is concerned with creating, advancing, and using robots. Computer vision, artificial Intelligence, control systems, and mechanical engineering fundamentals are all topics covered by robotics students. They acquire skills in programming robots, designing robotic systems, and creating algorithms to enable autonomous behavior. Robotics specialists contribute to industrial automation, healthcare, exploration, and entertainment by developing innovative robotic technologies.

Development is a broad domain that involves creating, maintaining, and upgrading software applications. Students specializing in software development are taught programming languages, software engineering principles, and various development methodologies. They acquire knowledge and skills in these areas to effectively build, maintain, and enhance software applications. They acquire skills in designing software architectures, writing code, debugging, and testing applications. Software developers work on projects ranging from mobile apps to enterprise systems, collaborating with teams to deliver functional and user-friendly software solutions.

Simulation and modeling focus on creating virtual representations of real-world systems and processes. Students in this specialization learn about mathematical modeling, computational algorithms, and simulation techniques. They acquire skills in designing simulations, running experiments, and analyzing results. Physicists, engineers, social scientists, and healthcare professionals benefit from the work of simulation and modeling specialists because they may get insights into complicated systems without performing real experiments.
Computer Programming: Computer programming is a critical component of computer science wherein students learn how to write code that controls computer structures. Learning programming languages, comprehending data structures, perfecting algorithms, and sharpening problem-solving approaches are all a part of this process. By learning these skills, programmers may create software and handle computer issues more effectively. They learn to write clear, efficient code, troubleshoot computer programs, and enhance performance. Computer programmers work on implementing software solutions and translating algorithms into executable code.
Software Systems: The software systems specialization is concerned with designing, analyzing, and administrating large-scale software systems. Project management, system design, software testing, and software architecture are topics covered by students specializing in this field. They learn to manage software development projects, ensure system scalability and stability, and integrate various software components. Experts in software systems contribute to creating sophisticated software applications utilized in the transportation, healthcare, and finance sectors.
Digital Image/ Sound: Digital image/sound specialization focuses on the processing and analysis of visual and audio data. Students in this specialization learn about image/sound processing algorithms, computer vision, signal processing, and multimedia technologies. They acquire skills in manipulating images, extracting features, recognizing patterns, and enhancing audio signals. Digital image/sound specialists work on various applications such as image recognition, video editing, virtual reality, and audio processing.

The specialization of data management focuses on the organization, storage, retrieval, and analysis of data. Data modeling, data warehousing, data mining, and database management systems are all topics covered by students in this specialization. They develop expertise in creating queries, maintaining data integrity, and drawing insightful conclusions from huge datasets. Data management experts contribute to sectors including finance, marketing, healthcare, and research by efficiently managing and using data for analysis and decision-making.

Operating systems (OS) are the creation and management of computer operating systems, which serve as the computer's brain. They manage the interactions of many computer components and allow us to utilize the computer successfully. The operating system is in charge of functions, including running programs, storing data, and connecting to the internet. It is responsible for running programs, memory allocation, and file storage.
Design Databases: The specialization of Designing Databases revolves around organizing, managing, and optimizing large-scale databases. Students pursuing this field learn about database design principles, data modeling, query optimization, and database management systems (DBMS). They acquire knowledge on creating relational and non-relational databases, developing efficient database schemas, and ensuring data security and integrity. Database designers are crucial in providing businesses with reliable and scalable data storage solutions.

Computer graphics is a field that focuses on utilizing computer technology to generate and manipulate visual content. Students specializing in this area explore modeling, animation, image processing, graphics algorithms, and rendering methods. They gain skills in developing and operating computer graphics programs, creating realistic 3D images, and designing interactive user interfaces. Professionals in computer graphics find applications in diverse industries, including gaming, virtual reality, animation, and visual effects.

Parallel Programming: Parallel Programming specialization involves designing and developing software that simultaneously executes tasks on multiple processors or cores. Students specializing in Parallel Programming learn about parallel algorithms, concurrency control, synchronization techniques, and distributed systems. They learn how to create parallel algorithms, maximize performance on multi-core architectures, overcome problems with data synchronization, and share in distributed computing settings. Experts in parallel programming are essential for enhancing the scalability and efficiency of computation in areas like scientific computing, big data analytics, and Artificial Intelligence.
iOS Development: The discipline of iOS development specializes in creating software apps specifically for Apple's iOS platform, which underpins gadgets like iPhones and iPads. Students specializing in iOS Development learn programming languages like Swift and Objective-C and frameworks like UIKit and Core Data. They learn how to develop iOS mobile applications that are feature-rich and user-friendly while following Apple's design guidelines and making use of the platform's particular advantages.
Mobile Development: Mobile Development is a larger specialization that includes the development of applications for multiple mobile platforms, such as iOS and Android. Students pursuing this specialization study programmings languages like Java and Kotlin and frameworks and technologies for creating mobile apps like React Native and Flutter. They learn about creating user-friendly, responsive mobile applications that work across various platforms and operating systems.

Memory Systems: Memory Systems specialization focuses on the design and optimization of computer memory subsystems. Students in this field study memory hierarchies, caching techniques, virtual memory systems, and memory management algorithms. They acquire skills in designing efficient memory architectures, improving data access speeds, and minimizing memory-related bottlenecks. Memory Systems specialists enhance system performance and ensure efficient memory utilization in various computing environments.
Artificial Intelligence: Artificial Intelligence (AI) is the study of intelligent systems capable of doing activities that generally require human Intelligence. It spans a wide variety of disciplines, which include robotics, machine learning, natural language processing, and computer vision. AI professionals attempt to create advanced algorithms and models that will allow computer systems to learn, reason, and make independent judgments. In essence, AI is involved with growing intelligent systems capable of replicating human-like Intelligence across numerous areas.
The students can take specializations in any of these sub-fields of computer science and also can get great opportunities in their careers. Computer Science has evolved all over the globe. It is like a drug that has created addiction in almost 70% to 80% of people all around.

Since the evolution of Computer Science, it has become a part of human life. In daily life, we use computer science through its various applications. Few of these applications are:

Internet Browsing: Whenever we search something on a web browser through an internet connection, the browser uses the search algorithms and parallel computing to find and provide the best results for your query. So, it has become easy to learn about everything through internet browsing. Thanks to this application, we may interact with individuals globally, easily learn about various topics, and have access to a wealth of knowledge.
Online Shopping: It is similar to window shopping where the shoppers purchase items by sitting at one place. They get lots of discounts and vouchers for online shopping. It is a nice application, but there may be chances of stealing the credit/debit card information. But, no wonder artificial intelligence and network security perform their role too well and prevent our data from stealing. Creating safe e-commerce platforms, payment gateways, and recommendation algorithms that customize our buying experiences depends heavily on computer science.
Video Games: People of all ages are now fascinated by video games, which have emerged as a popular form of entertainment. Game settings, characters, and effects are produced aesthetically using computer graphics, a branch of computer science. The whole concept of Video games depends on Computer Graphics. The Graphics Designer and Developer are responsible for creating such video games. It attracts kids to play these games and learn how to play.
Social media: Sites like Facebook, Instagram, and Twitter have taken center stage in our social interactions. These platforms use computer science to offer seamless communication, content sharing, and customized experiences. Algorithms analyze our preferences, interests, and relationships to deliver personalized information and suggestions. Social media has altered how we connect with friends, family, and the world.
Digital assistants: Digital assistants like Siri, Google Assistant, and Amazon Alexa are already commonplace on our smartphones. Intelligent programs utilize machine learning and natural language processing (NLP) to understand and respond to voice commands and inquiries. They improve our customer experience by offering convenient and interactive help. They can do tasks, deliver information, and manage various smart devices, improving the convenience and effectiveness of our daily life.
Healthcare Systems: Computer science is essential to enhancing patient care, diagnosis, and treatment in healthcare systems. Healthcare professionals may securely store and access patient information using electronic health record (EHR) systems, facilitating effective record-keeping, data analysis, and decision-making. Medical image processing, powered by computer algorithms, aids in the diagnosis of illnesses such as cancer and offers valuable insights for treatment planning.
Financial Technology: Financial technology, or FinTech, has transformed the financial sector by combining computer science and finance. The industry has seen major changes as a result of this convergence. Artificial intelligence and computer algorithms have considerably improved financial decision-making and optimized investment strategies in an expansion of procedures, along with excessive-frequency trading, algorithmic trading, and risk assessment. An easy and secure alternative for humans to monitor their accounts and conduct transactions has also been made available with the arrival of mobile banking applications and online payment systems.
In addition to these applications, there are various other applications of Computer Science that we use in our daily life.

Computer Science has sparked the world with its charming and fascinating theories, engineering, and experiments. It has led to various developments that saves much time of people daily and has become a helping hand for them.

The different specializations in the field of Computer Science have attracted a lot of students. So, if anyone has an interest in this field can pursue the degree of Computer Science from colleges or universities offering the program and make their career options in the following fields:

Database Administrator: Database Administrators are important figures responsible for efficiently managing and organizing data within organizations. They're involved in designing, developing, and maintaining databases to make certain the integrity, safety, and accessibility of data. Similarly, Database administrators handle crucial responsibilities such as database backup and recovery, performance optimization, and managing user access. They work closely with other teams to understand data requirements and provide efficient database solutions. A strong understanding of database management systems, query languages (such as SQL), and data modeling is essential for this career.

Web developers are highly competent people that design and build websites and web applications. They work with customers or teams to gather requirements before developing aesthetically appealing and functioning websites using computer languages like HTML, CSS, and JavaScript. Web developers can specialize in front-end development (user interfaces) or back-end development (server-side programming and database connectivity). Their knowledge of responsive design, interactive features, and user-friendly interfaces guarantees the creation of effective online platforms. Additionally, they frequently collaborate with designers and content material creators to ensure the delivery of the best websites.

Software Analysts bridge the gap between users and software development teams. They analyze user needs, gather requirements, and translate them into detailed software specifications. Software Analysts work closely with stakeholders to identify business processes, define system functionality, and recommend solutions. They have a strong understanding of software development methodologies, project management, and communication skills. They ensure that software projects align with user expectations and organizational goals.

Software and Hardware Engineers are responsible for designing, developing, and maintaining software and hardware systems. Software Engineers are accountable for coding and creating software programs, focusing on ensuring capability, performance, and security. They craft software solutions by using diverse programming languages, frameworks, and development tools. On the other hand, Hardware Engineers concentrate on designing and developing computer hardware components and systems. Their expertise may lie in specific areas such as computer architecture, embedded systems, or integrated circuits. Software and Hardware Engineers collaborate with teams to solve complex problems and contribute to technological advancements.

Computer system Operators have the important task of tracking and preserving the performance of computer systems in an organization. They're responsible for overseeing the operations of hardware, software, and networks to ensure smooth functionality and address any troubles that can arise. This includes tracking device activities, undertaking routine maintenance, updating software, and dealing with backups and safety features. The role of computer system Operators is essential in maintaining the reliability and performance of computer systems.

Testers, also called quality assurance (QA) Analysts, are obligated to guarantee the quality and capability of software program applications or systems. Their role involves designing and implementing test plans, identifying and documenting defects, and working closely with development groups to cope with issues. Testers utilize various testing techniques and tools to validate software functionality, usability, and performance. Their contribution is crucial in ensuring that software program meets the necessary standards and function as intended.

Coders also referred to as software developers or programmers, have the responsibility of creating, designing, and maintaining software programs. They utilize programming languages like Java, Python, C++, or JavaScript to develop effective software solutions. Coders analyze user requirements, design software architecture, write code, and debug and test applications. Coders engage in numerous projects, including web, mobile app, and system software development.

Computer graphics Designers specialize in developing visual content for different mediums, which includes print, web, or multimedia presentations. They employ graphic design software and tools to supply visually appealing and captivating graphics, illustrations, and animations. Computer graphics Designers work on tasks like website design, logo layout, advertising materials, and game graphics, combining artistic capabilities with technical proficiency to supply visually stunning visuals.

Computer Networking Engineers specialize in designing, implementing, and managing computer networks. They ensure the smooth and secure transfer of data between devices and systems. Networking Engineers set up and configure network equipment, troubleshoot network issues, and implement security measures. They work with protocols together with TCP/IP, configure routers and switches, and optimize network performance.

And there are lots more, know your interest, set your mind, take steps, and grab the opportunities you get.

A computer is an electronic device that can receive, store, process, and output data. It is a machine that can perform a variety of tasks and operations, ranging from simple calculations to complex simulations and artificial intelligence.

Computers consist of hardware components such as the central processing unit (CPU), memory, storage devices, input/output devices, and peripherals, as well as software components such as the operating system and applications.

The history of computers can be traced back to the 19th century when mechanical devices such as the Analytical Engine and tabulating machines were developed. However, modern computers as we know them today were developed in the mid-20th century with the invention of the transistor and the development of integrated circuits.Not to be confused with Information Engineering. Data engineering refers to the building of systems to enable the collection and usage of data. This data is usually used to enable subsequent analysis and data science; which often involves machine learning.[1][2] Making the data usable usually involves substantial compute and storage, as well as data processing.

Around the 1970s/1980s the term information engineering methodology (IEM) was created to describe database design and the use of software for data analysis and processing.[3][4] These techniques were intended to be used by database administrators (DBAs) and by systems analysts based upon an understanding of the operational processing needs of organizations for the 1980s. In particular, these techniques were meant to help bridge the gap between strategic business planning and information systems. A key early contributor (often called the "father" of information engineering methodology) was the Australian Clive Finkelstein, who wrote several articles about it between 1976 and 1980, and also co-authored an influential Savant Institute report on it with James Martin.[5][6][7] Over the next few years, Finkelstein continued work in a more business-driven direction, which was intended to address a rapidly changing business environment; Martin continued work in a more data processing-driven direction. From 1983 to 1987, Charles M. Richter, guided by Clive Finkelstein, played a significant role in revamping IEM as well as helping to design the IEM software product (user data), which helped automate IEM.

In the early 2000s, the data and data tooling was generally held by the information technology (IT) teams in most companies.[8] Other teams then used data for their work (e.g. reporting), and there was usually little overlap in data skillset between these parts of the business.

In the early 2010s, with the rise of the internet, the massive increase in data volumes, velocity, and variety led to the term big data to describe the data itself, and data-driven tech companies like Facebook and Airbnb started using the phrase data engineer.[3][8] Due to the new scale of the data, major firms like Google, Facebook, Amazon, Apple, Microsoft, and Netflix started to move away from traditional ETL and storage techniques. They started creating data engineering, a type of software engineering focused on data, and in particular infrastructure, warehousing, data protection, cybersecurity, mining, modelling, processing, and metadata management.[3][8] This change in approach was particularly focused on cloud computing.[8] Data started to be handled and used by many parts of the business, such as sales and marketing, and not just IT.[8]

High-performance computing is critical for the processing and analysis of data. One particularly widespread approach to computing for data engineering is dataflow programming, in which the computation is represented as a directed graph (dataflow graph); nodes are the operations, and edges represent the flow of data.[9] Popular implementations include Apache Spark, and the deep learning specific TensorFlow.[9][10][11] More recent implementations such as Differential/Timely Dataflow have used incremental computing for much more efficient data processing.[9][12][13]

Data is stored in a variety of ways, one of the key deciding factors is in how the data will be used. Data engineers optimize data storage and processing systems to reduce costs. They use data compression, partitioning, and archiving.

If the data is structured and some form of online transaction processing is required, then databases are generally used.[14] Originally mostly relational databases were used, with strong ACID transaction correctness guarantees; most relational databases use SQL for their queries. However, with the growth of data in the 2010s, NoSQL databases have also become popular since they horizontally scaled more easily than relational databases by giving up the ACID transaction guarantees, as well as reducing the object-relational impedance mismatch.[15] More recently, NewSQL databases — which attempt to allow horizontal scaling while retaining ACID guarantees — have become popular.[16][17][18][19]

If the data is structured and online analytical processing is required (but not online transaction processing), then data warehouses are a main choice.[20] They enable data analysis, mining, and artificial intelligence on a much larger scale than databases can allow,[20] and indeed data often flow from databases into data warehouses.[21] Business analysts, data engineers, and data scientists can access data warehouses using tools such as SQL or business intelligence software.[21] In computing, a data warehouse (DW or DWH), also known as an enterprise data warehouse (EDW), is a system used for reporting and data analysis and is considered a core component of business intelligence.[1] Data warehouses are central repositories of integrated data from one or more disparate sources. They store current and historical data in one single place[2] that are used for creating analytical reports for workers throughout the enterprise.[3] This is beneficial for companies as it enables them to interrogate and draw insights from their data and make decisions.[4] The data stored in the warehouse is uploaded from the operational systems (such as marketing or sales). The data may pass through an operational data store and may require data cleansing[2] for additional operations to ensure data quality before it is used in the data warehouse for reporting. Extract, transform, load (ETL) and extract, load, transform (ELT) are the two main approaches used to build a data warehouse system. The typical extract, transform, load (ETL)-based data warehouse[5] uses staging, data integration, and access layers to house its key functions. The staging layer or staging database stores raw data extracted from each of the disparate source data systems. The integration layer integrates disparate data sets by transforming the data from the staging layer, often storing this transformed data in an operational data store (ODS) database. The integrated data are then moved to yet another database, often called the data warehouse database, where the data is arranged into hierarchical groups, often called dimensions, and into facts and aggregate facts. The combination of facts and dimensions is sometimes called a star schema. The access layer helps users retrieve data.[6] The main source of the data is cleansed, transformed, catalogued, and made available for use by managers and other business professionals for data mining, online analytical processing, market research and decision support.[7] However, the means to retrieve and analyze data, to extract, transform, and load data, and to manage the data dictionary are also considered essential components of a data warehousing system. Many references to data warehousing use this broader context. Thus, an expanded definition of data warehousing includes business intelligence tools, tools to extract, transform, and load data into the repository, and tools to manage and retrieve metadata. ELT-based data warehousing gets rid of a separate ETL tool for data transformation. Instead, it maintains a staging area inside the data warehouse itself. In this approach, data gets extracted from heterogeneous source systems and are then directly loaded into the data warehouse, before any transformation occurs. All necessary transformations are then handled inside the data warehouse itself. Finally, the manipulated data gets loaded into target tables in the same data warehouse. 

A data warehouse maintains a copy of information from the source transaction systems. This architectural complexity provides the opportunity to:
Integrate data from multiple sources into a single database and data model. More congregation of data to single database so a single query engine can be used to present data in an ODS.
Mitigate the problem of database isolation level lock contention in transaction processing systems caused by attempts to run large, long-running analysis queries in transaction processing databases.
Maintain data history, even if the source transaction systems do not.
Integrate data from multiple source systems, enabling a central view across the enterprise. This benefit is always valuable, but particularly so when the organization has grown by merger.
Improve data quality, by providing consistent codes and descriptions, flagging or even fixing bad data.
Present the organization's information consistently.
Provide a single common data model for all data of interest regardless of the data's source.
Restructure the data so that it makes sense to the business users.
Restructure the data so that it delivers excellent query performance, even for complex analytic queries, without impacting the operational systems.
Add value to operational business applications, notably customer relationship management (CRM) systems.
Make decision–support queries easier to write.
Organize and disambiguate repetitive data.

A data mart is a simple form of a data warehouse that is focused on a single subject (or functional area), hence they draw data from a limited number of sources such as sales, finance or marketing. Data marts are often built and controlled by a single department within an organization. The sources could be internal operational systems, a central data warehouse, or external data.[9] Denormalization is the norm for data modeling techniques in this system. Given that data marts generally cover only a subset of the data contained in a data warehouse, they are often easier and faster to implement. 

Types of data marts include dependent, independent, and hybrid data marts.

Online analytical processing (OLAP) is characterized by a relatively low volume of transactions. Queries are often very complex and involve aggregations. For OLAP systems, response time is an effective measure. OLAP applications are widely used by Data Mining techniques. OLAP databases store aggregated, historical data in multi-dimensional schemas (usually star schemas). OLAP systems typically have a data latency of a few hours, as opposed to data marts, where latency is expected to be closer to one day. The OLAP approach is used to analyze multidimensional data from multiple sources and perspectives. The three basic operations in OLAP are Roll-up (Consolidation), Drill-down, and Slicing & Dicing.

Online transaction processing (OLTP) is characterized by a large number of short on-line transactions (INSERT, UPDATE, DELETE). OLTP systems emphasize very fast query processing and maintaining data integrity in multi-access environments. For OLTP systems, effectiveness is measured by the number of transactions per second. OLTP databases contain detailed and current data. The schema used to store transactional databases is the entity model (usually 3NF).[10] Normalization is the norm for data modeling techniques in this system.

Predictive analytics is about finding and quantifying hidden patterns in the data using complex mathematical models that can be used to predict future outcomes. Predictive analysis is different from OLAP in that OLAP focuses on historical data analysis and is reactive in nature, while predictive analysis focuses on the future. These systems are also used for customer relationship management (CRM).

The concept of data warehousing dates back to the late 1980s[11] when IBM researchers Barry Devlin and Paul Murphy developed the "business data warehouse". In essence, the data warehousing concept was intended to provide an architectural model for the flow of data from operational systems to decision support environments. The concept attempted to address the various problems associated with this flow, mainly the high costs associated with it. In the absence of a data warehousing architecture, an enormous amount of redundancy was required to support multiple decision support environments. In larger corporations, it was typical for multiple decision support environments to operate independently. Though each environment served different users, they often required much of the same stored data. The process of gathering, cleaning and integrating data from various sources, usually from long-term existing operational systems (usually referred to as legacy systems), was typically in part replicated for each environment. Moreover, the operational systems were frequently reexamined as new decision support requirements emerged. Often new requirements necessitated gathering, cleaning and integrating new data from "data marts" that was tailored for ready access by users. Additionally, with the publication of The IRM Imperative (Wiley & Sons, 1991) by James M. Kerr, the idea of managing and putting a dollar value on an organization's data resources and then reporting that value as an asset on a balance sheet became popular. In the book, Kerr described a way to populate subject-area databases from data derived from transaction-driven systems to create a storage area where summary data could be further leveraged to inform executive decision-making. This concept served to promote further thinking of how a data warehouse could be developed and managed in a practical way within any enterprise.

Key developments in early years of data warehousing:

1960s - General Mills and Dartmouth College, in a joint research project, develop the terms dimensions and facts.[12]
1970s – ACNielsen and IRI provide dimensional data marts for retail sales.[12]
1970s – Bill Inmon begins to define and discuss the term Data Warehouse.[citation needed][13]
1975 – Sperry Univac introduces MAPPER (MAintain, Prepare, and Produce Executive Reports), a database management and reporting system that includes the world's first 4GL. It is the first platform designed for building Information Centers (a forerunner of contemporary data warehouse technology).
1983 – Teradata introduces the DBC/1012 database computer specifically designed for decision support.[14]
1984 – Metaphor Computer Systems, founded by David Liddle and Don Massaro, releases a hardware/software package and GUI for business users to create a database management and analytic system.
1988 – Barry Devlin and Paul Murphy publish the article "An architecture for a business and information system" where they introduce the term "business data warehouse".[15]
1990 – Red Brick Systems, founded by Ralph Kimball, introduces Red Brick Warehouse, a database management system specifically for data warehousing.
1991 - James M. Kerr authors The IRM Imperative, which suggests data resources could be reported as an asset on a balance sheet, furthering commercial interest in the establishment of data warehouses.
1991 – Prism Solutions, founded by Bill Inmon, introduces Prism Warehouse Manager, software for developing a data warehouse.
1992 – Bill Inmon publishes the book Building the Data Warehouse.[16]
1995 – The Data Warehousing Institute, a for-profit organization that promotes data warehousing, is founded.
1996 – Ralph Kimball publishes the book The Data Warehouse Toolkit.[17]
1998 – Focal modeling is implemented as an ensemble (hybrid) data warehouse modeling approach, with Patrik Lager as one of the main drivers.[18][19]
2000 – Dan Linstedt releases in the public domain the Data vault modeling, conceived in 1990 as an alternative to Inmon and Kimball to provide long-term historical storage of data coming in from multiple operational systems, with emphasis on tracing, auditing and resilience to change of the source data model.
2008 – Bill Inmon, along with Derek Strauss and Genia Neushloss, publishes "DW 2.0: The Architecture for the Next Generation of Data Warehousing", explaining his top-down approach to data warehousing and coining the term, data-warehousing 2.0.
2008 – Anchor modeling was formalized in a paper presented at the International Conference on Conceptual Modeling, and won the best paper award[20]
2012 – Bill Inmon develops and makes public technology known as "textual disambiguation". Textual disambiguation applies context to raw text and reformats the raw text and context into a standard data base format. Once raw text is passed through textual disambiguation, it can easily and efficiently be accessed and analyzed by standard business intelligence technology. Textual disambiguation is accomplished through the execution of textual ETL. Textual disambiguation is useful wherever raw text is found, such as in documents, Hadoop, email, and so forth.
2013 – Data vault 2.0 was released,[21][22] having some minor changes to the modeling method, as well as integration with best practices from other methodologies, architectures and implementations including agile and CMMI principles.

A data lake is a centralized repository for storing, processing, and securing large volumes of data. A data lake can contain structured data from relational databases, semi-structured data, unstructured data, and binary data. A data lake can be created on premises or in a cloud-based environment using the services from public cloud vendors such as Amazon, Microsoft, or Google.

If the data is less structured, then often they are just stored as files. There are several options:
File systems represent data hierarchically in nested folders.[22]
Block storage splits data into regularly sized chunks;[22] this often matches up with (virtual) hard drives or solid state drives.
Object storage manages data using metadata;[22] often each file is assigned a key such as a UUID.[23]

The number and variety of different data processes and storage locations can become overwhelming for users. This inspired the usage of a workflow management system (e.g. Airflow) to allow the data tasks to be specified, created, and monitored.[24] The tasks are often specified as a directed acyclic graph (DAG).[24]

Business objectives that executives set for what's to come are characterized in key business plans, with their more noteworthy definition in tactical business plans and implementation in operational business plans. Most businesses today recognize the fundamental need to grow a business plan that follows this strategy. It is often difficult to implement these plans because of the lack of transparency at the tactical and operational degrees of organizations. This kind of planning requires feedback to allow for early correction of problems that are due to miscommunication and misinterpretation of the business plan.

The design of data systems involves several components such as architecting data platforms, and designing data stores.[25][26]

This is the process of producing a data model, an abstract model to describe the data and relationships between different parts of the data.[27] A data model[2][3][4][5][6] is an abstract model that organizes elements of data and standardizes how they relate to one another and to the properties of real-world entities. For instance, a data model may specify that the data element representing a car be composed of a number of other elements which, in turn, represent the color and size of the car and define its owner. The corresponding professional activity is called generally data modeling or, more specifically, database design. Data models are typically specified by a data expert, data specialist, data scientist, data librarian, or a data scholar. A data modeling language and notation are often represented in graphical form as diagrams.[7] A data model can sometimes be referred to as a data structure, especially in the context of programming languages. Data models are often complemented by function models, especially in the context of enterprise models. A data model explicitly determines the structure of data; conversely, structured data is data organized according to an explicit data model or data structure. Structured data is in contrast to unstructured data and semi-structured data. The term data model can refer to two distinct but closely related concepts. Sometimes it refers to an abstract formalization of the objects and relationships found in a particular application domain: for example the customers, products, and orders found in a manufacturing organization. At other times it refers to the set of concepts used in defining such formalizations: for example concepts such as entities, attributes, relations, or tables. So the "data model" of a banking application may be defined using the entity–relationship "data model". This article uses the term in both senses. Managing large quantities of structured and unstructured data is a primary function of information systems. Data models describe the structure, manipulation, and integrity aspects of the data stored in data management systems such as relational databases. They may also describe data with a looser structure, such as word processing documents, email messages, pictures, digital audio, and video: XDM, for example, provides a data model for XML documents. The main aim of data models is to support the development of information systems by providing the definition and format of data. According to West and Fowler (1999) "if this is done consistently across systems then compatibility of data can be achieved. If the same data structures are used to store and access data then different applications can share data. The results of this are indicated above. However, systems and interfaces often cost more than they should, to build, operate, and maintain. They may also constrain the business rather than support it. A major cause is that the quality of the data models implemented in systems and interfaces is poor".[8]

"Business rules, specific to how things are done in a particular place, are often fixed in the structure of a data model. This means that small changes in the way business is conducted lead to large changes in computer systems and interfaces".[8]
"Entity types are often not identified, or incorrectly identified. This can lead to replication of data, data structure, and functionality, together with the attendant costs of that duplication in development and maintenance".[8]
"Data models for different systems are arbitrarily different. The result of this is that complex interfaces are required between systems that share data. These interfaces can account for between 25-70% of the cost of current systems".[8]
"Data cannot be shared electronically with customers and suppliers, because the structure and meaning of data has not been standardized. For example, engineering design data and drawings for process plant are still sometimes exchanged on paper".[8]
The reason for these problems is a lack of standards that will ensure that data models will both meet business needs and be consistent.[8]

A data model explicitly determines the structure of data. Typical applications of data models include database models, design of information systems, and enabling exchange of data. Usually, data models are specified in a data modeling language.[3] A database model is a specification describing how a database is structured and used.

A data engineer is a type of software engineer who creates big data ETL pipelines to manage the flow of data through the organization. This makes it possible to take huge amounts of data and translate it into insights.[28] They are focused on the production readiness of data and things like formats, resilience, scaling, and security. Data engineers usually hail from a software engineering background and are proficient in programming languages like Java, Python, Scala, and Rust.[29][3] They will be more familiar with databases, architecture, cloud computing, and Agile software development.[3] Big data
Big data primarily refers to data sets that are too large or complex to be dealt with by traditional data-processing application software. Data with many entries (rows) offer greater statistical power, while data with higher complexity (more attributes or columns) may lead to a higher false discovery rate.[2] Though used sometimes loosely partly due to a lack of formal definition, the best interpretation is that it is a large body of information that cannot be comprehended when used in small amounts only.[3]

Big data analysis challenges include capturing data, data storage, data analysis, search, sharing, transfer, visualization, querying, updating, information privacy, and data source. Big data was originally associated with three key concepts: volume, variety, and velocity.[4] The analysis of big data presents challenges in sampling, and thus previously allowing for only observations and sampling. Thus a fourth concept, veracity, refers to the quality or insightfulness of the data. Without sufficient investment in expertise for big data veracity, the volume and variety of data can produce costs and risks that exceed an organization's capacity to create and capture value from big data.[5]

Current usage of the term big data tends to refer to the use of predictive analytics, user behavior analytics, or certain other advanced data analytics methods that extract value from big data, and seldom to a particular size of data set. "There is little doubt that the quantities of data now available are indeed large, but that's not the most relevant characteristic of this new data ecosystem."[6] Analysis of data sets can find new correlations to "spot business trends, prevent diseases, combat crime and so on".[7] Scientists, business executives, medical practitioners, advertising and governments alike regularly meet difficulties with large data-sets in areas including Internet searches, fintech, healthcare analytics, geographic information systems, urban informatics, and business informatics. Scientists encounter limitations in e-Science work, including meteorology, genomics,[8] connectomics, complex physics simulations, biology, and environmental research.[9]

The size and number of available data sets have grown rapidly as data is collected by devices such as mobile devices, cheap and numerous information-sensing Internet of things devices, aerial (remote sensing), software logs, cameras, microphones, radio-frequency identification (RFID) readers and wireless sensor networks.[10][11] The world's technological per-capita capacity to store information has roughly doubled every 40 months since the 1980s;[12] as of 2012, every day 2.5 exabytes (2.17×260 bytes) of data are generated.[13] Based on an IDC report prediction, the global data volume was predicted to grow exponentially from 4.4 zettabytes to 44 zettabytes between 2013 and 2020. By 2025, IDC predicts there will be 163 zettabytes of data.[14] According to IDC, global spending on big data and business analytics (BDA) solutions is estimated to reach $215.7 billion in 2021.[15][16] While Statista report, the global big data market is forecasted to grow to $103 billion by 2027.[17] In 2011 McKinsey & Company reported, if US healthcare were to use big data creatively and effectively to drive efficiency and quality, the sector could create more than $300 billion in value every year.[18] In the developed economies of Europe, government administrators could save more than €100 billion ($149 billion) in operational efficiency improvements alone by using big data.[18] And users of services enabled by personal-location data could capture $600 billion in consumer surplus.[18] One question for large enterprises is determining who should own big-data initiatives that affect the entire organization.[19]

Relational database management systems and desktop statistical software packages used to visualize data often have difficulty processing and analyzing big data. The processing and analysis of big data may require "massively parallel software running on tens, hundreds, or even thousands of servers".[20] What qualifies as "big data" varies depending on the capabilities of those analyzing it and their tools. Furthermore, expanding capabilities make big data a moving target. "For some organizations, facing hundreds of gigabytes of data for the first time may trigger a need to reconsider data management options. For others, it may take tens or hundreds of terabytes before data size becomes a significant consideration."[21]

The term big data has been in use since the 1990s, with some giving credit to John Mashey for popularizing the term.[22][23] Big data usually includes data sets with sizes beyond the ability of commonly used software tools to capture, curate, manage, and process data within a tolerable elapsed time.[24][page needed] Big data philosophy encompasses unstructured, semi-structured and structured data; however, the main focus is on unstructured data.[25] Big data "size" is a constantly moving target; as of 2012 ranging from a few dozen terabytes to many zettabytes of data.[26] Big data requires a set of techniques and technologies with new forms of integration to reveal insights from data-sets that are diverse, complex, and of a massive scale.[27]

"Variety", "veracity", and various other "Vs" are added by some organizations to describe it, a revision challenged by some industry authorities.[28] The Vs of big data were often referred to as the "three Vs", "four Vs", and "five Vs". They represented the qualities of big data in volume, variety, velocity, veracity, and value.[4] Variability is often included as an additional quality of big data. A 2018 definition states "Big data is where parallel computing tools are needed to handle data", and notes, "This represents a distinct and clearly defined change in the computer science used, via parallel programming theories, and losses of some of the guarantees and capabilities made by Codd's relational model."[29] In a comparative study of big datasets, Kitchin and McArdle found that none of the commonly considered characteristics of big data appear consistently across all of the analyzed cases.[30] For this reason, other studies identified the redefinition of power dynamics in knowledge discovery as the defining trait.[31] Instead of focusing on the intrinsic characteristics of big data, this alternative perspective pushes forward a relational understanding of the object claiming that what matters is the way in which data is collected, stored, made available and analyzed. 
In computing, extract, transform, load (ETL) is a three-phase process where data is extracted, transformed (cleaned, sanitized, scrubbed) and loaded into an output data container. The data can be collated from one or more sources and it can also be output to one or more destinations. ETL processing is typically executed using software applications but it can also be done manually by system operators. ETL software typically automates the entire process and can be run manually or on reccurring schedules either as single jobs or aggregated into a batch of jobs.

A properly designed ETL system extracts data from source systems and enforces data type and data validity standards and ensures it conforms structurally to the requirements of the output. Some ETL systems can also deliver data in a presentation-ready format so that application developers can build applications and end users can make decisions.[1] The ETL process is often used in data warehousing.[2] ETL systems commonly integrate data from multiple applications (systems), typically developed and supported by different vendors or hosted on separate computer hardware. The separate systems containing the original data are frequently managed and operated by different stakeholders. For example, a cost accounting system may combine data from payroll, sales, and purchasing. Data extraction involves extracting data from homogeneous or heterogeneous sources; data transformation processes data by data cleaning and transforming it into a proper storage format/structure for the purposes of querying and analysis; finally, data loading describes the insertion of data into the final target database such as an operational data store, a data mart, data lake or a data warehouse.[3][4] ETL processing involves ETL processing involves extracting the data from the source system(s). In many cases, this represents the most important aspect of ETL, since extracting data correctly sets the stage for the success of subsequent processes. Most data-warehousing projects combine data from different source systems. Each separate system may also use a different data organization and/or format. Common data-source formats include relational databases, flat-file databases, XML, and JSON, but may also include non-relational database structures such as IBM Information Management System or other data structures such as Virtual Storage Access Method (VSAM) or Indexed Sequential Access Method (ISAM), or even formats fetched from outside sources by means such as a web crawler or data scraping. The streaming of the extracted data source and loading on-the-fly to the destination database is another way of performing ETL when no intermediate data storage is required. An intrinsic part of the extraction involves data validation to confirm whether the data pulled from the sources has the correct/expected values in a given domain (such as a pattern/default or list of values). If the data fails the validation rules, it is rejected entirely or in part. The rejected data is ideally reported back to the source system for further analysis to identify and to rectify incorrect records or perform data wrangling. In the data transformation stage, a series of rules or functions are applied to the extracted data in order to prepare it for loading into the end target. An important function of transformation is data cleansing, which aims to pass only "proper" data to the target. The challenge when different systems interact is in the relevant systems' interfacing and communicating. Character sets that may be available in one system may not be so in others.
In other cases, one or more of the following transformation types may be required to meet the business and technical needs of the server or data warehouse:
Selecting only certain columns to load: (or selecting null columns not to load). For example, if the source data has three columns (aka "attributes"), roll_no, age, and salary, then the selection may take only roll_no and salary. Or, the selection mechanism may ignore all those records where salary is not present (salary = null).
Translating coded values: (e.g., if the source system codes male as "1" and female as "2", but the warehouse codes male as "M" and female as "F")
Encoding free-form values: (e.g., mapping "Male" to "M")
Deriving a new calculated value: (e.g., sale_amount = qty * unit_price)
Sorting or ordering the data based on a list of columns to improve search performance
Joining data from multiple sources (e.g., lookup, merge) and deduplicating the data
Aggregating (for example, rollup — summarizing multiple rows of data — total sales for each store, and for each region, etc.)
Generating surrogate-key values
Transposing or pivoting (turning multiple columns into multiple rows or vice versa)
Splitting a column into multiple columns (e.g., converting a comma-separated list, specified as a string in one column, into individual values in different columns)
Disaggregating repeating columns
Looking up and validating the relevant data from tables or referential files
Applying any form of data validation; failed validation may result in a full rejection of the data, partial rejection, or no rejection at all, and thus none, some, or all of the data is handed over to the next step depending on the rule design and exception handling; many of the above transformations may result in exceptions, e.g., when a code translation parses an unknown code in the extracted data

The load phase loads the data into the end target, which can be any data store including a simple delimited flat file or a data warehouse. Depending on the requirements of the organization, this process varies widely. Some data warehouses may overwrite existing information with cumulative information; updating extracted data is frequently done on a daily, weekly, or monthly basis. Other data warehouses (or even other parts of the same data warehouse) may add new data in a historical form at regular intervals — for example, hourly. To understand this, consider a data warehouse that is required to maintain sales records of the last year. This data warehouse overwrites any data older than a year with newer data. However, the entry of data for any one year window is made in a historical manner. The timing and scope to replace or append are strategic design choices dependent on the time available and the business needs. More complex systems can maintain a history and audit trail of all changes to the data loaded in the data warehouse. As the load phase interacts with a database, the constraints defined in the database schema — as well as in triggers activated upon data load — apply (for example, uniqueness, referential integrity, mandatory fields), which also contribute to the overall data quality performance of the ETL process.

For example, a financial institution might have information on a customer in several departments and each department might have that customer's information listed in a different way. The membership department might list the customer by name, whereas the accounting department might list the customer by number. ETL can bundle all of these data elements and consolidate them into a uniform presentation, such as for storing in a database or data warehouse.
Another way that companies use ETL is to move information to another application permanently. For instance, the new application might use another database vendor and most likely a very different database schema. ETL can be used to transform the data into a format suitable for the new application to use.
An example would be an expense and cost recovery system such as used by accountants, consultants, and law firms. The data usually ends up in the time and billing system, although some businesses may also utilize the raw data for employee productivity reports to Human Resources (personnel dept.) or equipment usage reports to Facilities Management. ETL processes can involve considerable complexity, and significant operational problems can occur with improperly designed ETL systems.
The range of data values or data quality in an operational system may exceed the expectations of designers at the time validation and transformation rules are specified. Data profiling of a source during data analysis can identify the data conditions that must be managed by transform rules specifications, leading to an amendment of validation rules explicitly and implicitly implemented in the ETL process. Data warehouses are typically assembled from a variety of data sources with different formats and purposes. As such, ETL is a key process to bring all the data together in a standard, homogeneous environment. Design analysis[5] should establish the scalability of an ETL system across the lifetime of its usage — including understanding the volumes of data that must be processed within service level agreements. The time available to extract from source systems may change, which may mean the same amount of data may have to be processed in less time. Some ETL systems have to scale to process terabytes of data to update data warehouses with tens of terabytes of data. Increasing volumes of data may require designs that can scale from daily batch to multiple-day micro batch to integration with message queues or real-time change-data-capture for continuous transformation and update.

Data scientists are more focused on the analysis of the data, they will be more familiar with mathematics, algorithms, statistics, and machine learning.[3] Mathematics is an area of knowledge that includes the topics of numbers, formulas and related structures, shapes and the spaces in which they are contained, and quantities and their changes. These topics are represented in modern mathematics with the major subdisciplines of number theory,[1] algebra,[2] geometry,[1] and analysis,[3] respectively. There is no general consensus among mathematicians about a common definition for their academic discipline. Most mathematical activity involves the discovery of properties of abstract objects and the use of pure reason to prove them. These objects consist of either abstractions from nature or—in modern mathematics—entities that are stipulated to have certain properties, called axioms. A proof consists of a succession of applications of deductive rules to already established results. These results include previously proved theorems, axioms, and—in case of abstraction from nature—some basic properties that are considered true starting points of the theory under consideration.[4] Mathematics is essential in the natural sciences, engineering, medicine, finance, computer science and the social sciences. Although mathematics is extensively used for modeling phenomena, the fundamental truths of mathematics are independent from any scientific experimentation. Some areas of mathematics, such as statistics and game theory, are developed in close correlation with their applications and are often grouped under applied mathematics. Other areas are developed independently from any application (and are therefore called pure mathematics), but often later find practical applications.[5][6] The problem of integer factorization, for example, which goes back to Euclid in 300 BC, had no practical application before its use in the RSA cryptosystem, now widely used for the security of computer networks.[7] Historically, the concept of a proof and its associated mathematical rigour first appeared in Greek mathematics, most notably in Euclid's Elements.[8] Since its beginning, mathematics was primarily divided into geometry and arithmetic (the manipulation of natural numbers and fractions), until the 16th and 17th centuries, when algebra[a] and infinitesimal calculus were introduced as new fields. Since then, the interaction between mathematical innovations and scientific discoveries has led to a correlated increase in the development of both.[9] At the end of the 19th century, the foundational crisis of mathematics led to the systematization of the axiomatic method,[10] which heralded a dramatic increase in the number of mathematical areas and their fields of application. The contemporary Mathematics Subject Classification lists more than 60 first-level areas of mathematics. 

"Algorithms" redirects here. For the subfield of computer science, see Analysis of algorithms. For other uses, see Algorithm (disambiguation). In mathematics and computer science, an algorithm (/ˈælɡərɪðəm/ ⓘ) is a finite sequence of rigorous instructions, typically used to solve a class of specific problems or to perform a computation.[1] Algorithms are used as specifications for performing calculations and data processing. More advanced algorithms can use conditionals to divert the code execution through various routes (referred to as automated decision-making) and deduce valid inferences (referred to as automated reasoning), achieving automation eventually. Using human characteristics as descriptors of machines in metaphorical ways was already practiced by Alan Turing with terms such as "memory", "search" and "stimulus".[2] In contrast, a heuristic is an approach to problem solving that may not be fully specified or may not guarantee correct or optimal results, especially in problem domains where there is no well-defined correct or optimal result.[3] For example, social media recommender systems rely on heuristics in such a way that, although widely characterized as "algorithms" in 21st century popular media, cannot deliver correct results due to the nature of the problem. As an effective method, an algorithm can be expressed within a finite amount of space and time[4] and in a well-defined formal language[5] for calculating a function.[6] Starting from an initial state and initial input (perhaps empty),[7] the instructions describe a computation that, when executed, proceeds through a finite[8] number of well-defined successive states, eventually producing "output"[9] and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.[10] Statistics (from German: Statistik, orig. "description of a state, a country")[1][2] is the discipline that concerns the collection, organization, analysis, interpretation, and presentation of data.[3][4][5] In applying statistics to a scientific, industrial, or social problem, it is conventional to begin with a statistical population or a statistical model to be studied. Populations can be diverse groups of people or objects such as "all people living in a country" or "every atom composing a crystal". Statistics deals with every aspect of data, including the planning of data collection in terms of the design of surveys and experiments.[6]

When census data cannot be collected, statisticians collect data by developing specific experiment designs and survey samples. Representative sampling assures that inferences and conclusions can reasonably extend from the sample to the population as a whole. An experimental study involves taking measurements of the system under study, manipulating the system, and then taking additional measurements using the same procedure to determine if the manipulation has modified the values of the measurements. In contrast, an observational study does not involve experimental manipulation.

Two main statistical methods are used in data analysis: descriptive statistics, which summarize data from a sample using indexes such as the mean or standard deviation, and inferential statistics, which draw conclusions from data that are subject to random variation (e.g., observational errors, sampling variation).[7] Descriptive statistics are most often concerned with two sets of properties of a distribution (sample or population): central tendency (or location) seeks to characterize the distribution's central or typical value, while dispersion (or variability) characterizes the extent to which members of the distribution depart from its center and each other. Inferences on mathematical statistics are made under the framework of probability theory, which deals with the analysis of random phenomena.

A standard statistical procedure involves the collection of data leading to a test of the relationship between two statistical data sets, or a data set and synthetic data drawn from an idealized model. A hypothesis is proposed for the statistical relationship between the two data sets, and this is compared as an alternative to an idealized null hypothesis of no relationship between two data sets. Rejecting or disproving the null hypothesis is done using statistical tests that quantify the sense in which the null can be proven false, given the data that are used in the test. Working from a null hypothesis, two basic forms of error are recognized: Type I errors (null hypothesis is rejected when it is in fact true, giving a "false positive") and Type II errors (null hypothesis fails to be rejected when an it is in fact false, giving a "false negative").[8] Multiple problems have come to be associated with this framework, ranging from obtaining a sufficient sample size to specifying an adequate null hypothesis.[7]

Statistical measurement processes are also prone to error in regards to the data that they generate. Many of these errors are classified as random (noise) or systematic (bias), but other types of errors (e.g., blunder, such as when an analyst reports incorrect units) can also occur. The presence of missing data or censoring may result in biased estimates and specific techniques have been developed to address these problems.
 
Machine learning (ML) is a field of study in artificial intelligence concerned with the development and study of statistical algorithms that can learn from data and generalize to unseen data, and thus perform tasks without explicit instructions.[1] Recently, generative artificial neural networks have been able to surpass many previous approaches in performance.[2][3] Machine learning approaches have been applied to many fields including large language models, computer vision, speech recognition, email filtering, agriculture, and medicine, where it is too costly to develop algorithms to perform the needed tasks.[4][5] ML is known in its application across business problems under the name predictive analytics. Although not all machine learning is statistically based, computational statistics is an important source of the field's methods. The mathematical foundations of ML are provided by mathematical optimization (mathematical programming) methods. Data mining is a related (parallel) field of study, focusing on exploratory data analysis through unsupervised learning.[7][8] From a theoretical point of view Probably approximately correct learning provides a framework for describing machine learning. The term machine learning was coined in 1959 by Arthur Samuel, an IBM employee and pioneer in the field of computer gaming and artificial intelligence.[9][10] The synonym self-teaching computers was also used in this time period.[11][12]

Although the earliest machine learning model was introduced in the 1950s when Arthur Samuel invented a program that calculated the winning chance in checkers for each side, the history of machine learning roots back to decades of human desire and effort to study human cognitive processes.[13] In 1949, Canadian psychologist Donald Hebb published the book The Organization of Behavior, in which he introduced a theoretical neural structure formed by certain interactions among nerve cells.[14] Hebb's model of neurons interacting with one another set a groundwork for how AIs and machine learning algorithms work under nodes, or artificial neurons used by computers to communicate data.[13] Other researchers who have studied human cognitive systems contributed to the modern machine learning technologies as well, including logician Walter Pitts and Warren McCulloch, who proposed the early mathematical models of neural networks to come up with algorithms that mirror human thought processes.[13]

By the early 1960s an experimental "learning machine" with punched tape memory, called Cybertron, had been developed by Raytheon Company to analyze sonar signals, electrocardiograms, and speech patterns using rudimentary reinforcement learning. It was repetitively "trained" by a human operator/teacher to recognize patterns and equipped with a "goof" button to cause it to re-evaluate incorrect decisions.[15] A representative book on research into machine learning during the 1960s was Nilsson's book on Learning Machines, dealing mostly with machine learning for pattern classification.[16] Interest related to pattern recognition continued into the 1970s, as described by Duda and Hart in 1973.[17] In 1981 a report was given on using teaching strategies so that an artificial neural network learns to recognize 40 characters (26 letters, 10 digits, and 4 special symbols) from a computer terminal.[18]

Tom M. Mitchell provided a widely quoted, more formal definition of the algorithms studied in the machine learning field: "A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."[19] This definition of the tasks in which machine learning is concerned offers a fundamentally operational definition rather than defining the field in cognitive terms. This follows Alan Turing's proposal in his paper "Computing Machinery and Intelligence", in which the question "Can machines think?" is replaced with the question "Can machines do what we (as thinking entities) can do?".[20]

Modern-day machine learning has two objectives. One is to classify data based on models which have been developed; the other purpose is to make predictions for future outcomes based on these models. A hypothetical algorithm specific to classifying data may use computer vision of moles coupled with supervised learning in order to train it to classify the cancerous moles. A machine learning algorithm for stock trading may inform the trader of future potential predictions.[21]

As a scientific endeavor, machine learning grew out of the quest for artificial intelligence (AI). In the early days of AI as an academic discipline, some researchers were interested in having machines learn from data. They attempted to approach the problem with various symbolic methods, as well as what were then termed "neural networks"; these were mostly perceptrons and other models that were later found to be reinventions of the generalized linear models of statistics.[23] Probabilistic reasoning was also employed, especially in automated medical diagnosis.[24]: 488 

However, an increasing emphasis on the logical, knowledge-based approach caused a rift between AI and machine learning. Probabilistic systems were plagued by theoretical and practical problems of data acquisition and representation.[24]: 488  By 1980, expert systems had come to dominate AI, and statistics was out of favor.[25] Work on symbolic/knowledge-based learning did continue within AI, leading to inductive logic programming, but the more statistical line of research was now outside the field of AI proper, in pattern recognition and information retrieval.[24]: 708–710, 755  Neural networks research had been abandoned by AI and computer science around the same time. This line, too, was continued outside the AI/CS field, as "connectionism", by researchers from other disciplines including Hopfield, Rumelhart, and Hinton. Their main success came in the mid-1980s with the reinvention of backpropagation.[24]: 25  Machine learning (ML), reorganized and recognized as its own field, started to flourish in the 1990s. The field changed its goal from achieving artificial intelligence to tackling solvable problems of a practical nature. It shifted focus away from the symbolic approaches it had inherited from AI, and toward methods and models borrowed from statistics, fuzzy logic, and probability theory.[25]  Machine learning and data mining often employ the same methods and overlap significantly, but while machine learning focuses on prediction, based on known properties learned from the training data, data mining focuses on the discovery of (previously) unknown properties in the data (this is the analysis step of knowledge discovery in databases). Data mining uses many machine learning methods, but with different goals; on the other hand, machine learning also employs data mining methods as "unsupervised learning" or as a preprocessing step to improve learner accuracy. Much of the confusion between these two research communities (which do often have separate conferences and separate journals, ECML PKDD being a major exception) comes from the basic assumptions they work with: in machine learning, performance is usually evaluated with respect to the ability to reproduce known knowledge, while in knowledge discovery and data mining (KDD) the key task is the discovery of previously unknown knowledge. Evaluated with respect to known knowledge, an uninformed (unsupervised) method will easily be outperformed by other supervised methods, while in a typical KDD task, supervised methods cannot be used due to the unavailability of training data. Machine learning also has intimate ties to optimization: many learning problems are formulated as minimization of some loss function on a training set of examples. Loss functions express the discrepancy between the predictions of the model being trained and the actual problem instances (for example, in classification, one wants to assign a label to instances, and models are trained to correctly predict the pre-assigned labels of a set of examples).[26] The difference between optimization and machine learning arises from the goal of generalization: while optimization algorithms can minimize the loss on a training set, machine learning is concerned with minimizing the loss on unseen samples. Characterizing the generalization of various learning algorithms is an active topic of current research, especially for deep learning algorithms. Deep learning is a class of machine learning algorithms that[9]: 199–200  uses multiple layers to progressively extract higher-level features from the raw input. For example, in image processing, lower layers may identify edges, while higher layers may identify the concepts relevant to a human such as digits or letters or faces. From another angle to view deep learning, deep learning refers to "computer-simulate" or "automate" human learning processes from a source (e.g., an image of dogs) to a learned object (dogs). Therefore, a notion coined as "deeper" learning or "deepest" learning[10] makes sense. The deepest learning refers to the fully automatic learning from a source to a final learned object. A deeper learning thus refers to a mixed learning process: a human learning process from a source to a learned semi-object, followed by a computer learning process from the human learned semi-object to a final learned object.

 































The history of artificial intelligence (AI) began in antiquity, with myths, stories and rumors of artificial beings endowed with intelligence or consciousness by master craftsmen. The seeds of modern AI were planted by philosophers who attempted to describe the process of human thinking as the mechanical manipulation of symbols. This work culminated in the invention of the programmable digital computer in the 1940s, a machine based on the abstract essence of mathematical reasoning. This device and the ideas behind it inspired a handful of scientists to begin seriously discussing the possibility of building an electronic brain.

Alan Turing was the first person to carry out substantial research in the field that he called Machine Intelligence.[1] The field of AI research was founded at a workshop held on the campus of Dartmouth College, USA during the summer of 1956.[2] Those who attended would become the leaders of AI research for decades. Many of them predicted that a machine as intelligent as a human being would exist in no more than a generation, and they were given millions of dollars to make this vision come true.[3]

Eventually, it became obvious that researchers had grossly underestimated the difficulty of the project.[4] In 1974, in response to the criticism from James Lighthill and ongoing pressure from congress, the U.S. and British Governments stopped funding undirected research into artificial intelligence, and the difficult years that followed would later be known as an "AI winter". Seven years later, a visionary initiative by the Japanese Government inspired governments and industry to provide AI with billions of dollars, but by the late 1980s the investors became disillusioned and withdrew funding again.

Investment and interest in AI boomed in the 2020s when machine learning was successfully applied to many problems in academia and industry due to new methods, the application of powerful computer hardware, and the collection of immense data sets.

Precursors
Mythical, fictional, and speculative precursors
Myth and legend
In Greek mythology, Talos was a giant constructed of bronze who acted as guardian for the island of Crete. He would throw boulders at the ships of invaders and would complete 3 circuits around the island's perimeter daily.[5] According to pseudo-Apollodorus' Bibliotheke, Hephaestus forged Talos with the aid of a cyclops and presented the automaton as a gift to Minos.[6] In the Argonautica, Jason and the Argonauts defeated him by way of a single plug near his foot which, once removed, allowed the vital ichor to flow out from his body and left him inanimate.[7]

Pygmalion was a legendary king and sculptor of Greek mythology, famously represented in Ovid's Metamorphoses. In the 10th book of Ovid's narrative poem, Pygmalion becomes disgusted with women when he witnesses the way in which the Propoetides prostitute themselves.[8] Despite this, he makes offerings at the temple of Venus asking the goddess to bring to him a woman just like a statue he carved.

In Of the Nature of Things, written by the Swiss alchemist, Paracelsus, he describes a procedure that he claims can fabricate an "artificial man". By placing the "sperm of a man" in horse dung, and feeding it the "Arcanum of Mans blood" after 40 days, the concoction will become a living infant.[9]

The earliest written account regarding golem-making is found in the writings of Eleazar ben Judah of Worms in the early 13th century.[10][11] During the Middle Ages, it was believed that the animation of a Golem could be achieved by insertion of a piece of paper with any of God’s names on it, into the mouth of the clay figure.[12] Unlike legendary automata like Brazen Heads,[13] a Golem was unable to speak.[14]

Takwin, the artificial creation of life, was a frequent topic of Ismaili alchemical manuscripts, especially those attributed to Jabir ibn Hayyan. Islamic alchemists attempted to create a broad range of life through their work, ranging from plants to animals.[15]

In Faust: The Second Part of the Tragedy by Johann Wolfgang von Goethe, an alchemically fabricated homunculus, destined to live forever in the flask in which he was made, endeavors to be born into a full human body. Upon the initiation of this transformation, however, the flask shatters and the homunculus dies.[16]

By the 19th century, ideas about artificial men and thinking machines were developed in fiction, as in Mary Shelley's Frankenstein or Karel Čapek's R.U.R. (Rossum's Universal Robots),[17] and speculation, such as Samuel Butler's "Darwin among the Machines",[18] and in real-world instances, including Edgar Allan Poe's "Maelzel's Chess Player".[19] AI is a common topic in science fiction through the present.[20]

Realistic humanoid automata were built by craftsman from every civilization, including Yan Shi,[21] Hero of Alexandria,[22] Al-Jazari,[23] Pierre Jaquet-Droz, and Wolfgang von Kempelen.[24][25]

The oldest known automata were the sacred statues of ancient Egypt and Greece.[26] The faithful believed that craftsman had imbued these figures with very real minds, capable of wisdom and emotion—Hermes Trismegistus wrote that "by discovering the true nature of the gods, man has been able to reproduce it".[27][28] English scholar Alexander Neckham asserted that the Ancient Roman poet Virgil had built a palace with automaton statues.[29]

During the early modern period, these legendary automata were said to possess the magical ability to answer questions put to them. The late medieval alchemist and proto-protestant Roger Bacon was purported to have fabricated a brazen head, having developed a legend of having been a wizard.[30][31] These legends were similar to the Norse myth of the Head of Mímir. According to legend, Mímir was known for his intellect and wisdom, and was beheaded in the Æsir-Vanir War. Odin is said to have "embalmed" the head with herbs and spoke incantations over it such that Mímir’s head remained able to speak wisdom to Odin. Odin then kept the head near him for counsel.[32]

Artificial intelligence is based on the assumption that the process of human thought can be mechanized. The study of mechanical—or "formal"—reasoning has a long history. Chinese and Greek philosophers all developed structured methods of formal deduction in the first millennium BCE. Their ideas were developed over the centuries by philosophers such as Aristotle (who gave a formal analysis of the syllogism), Euclid (whose Elements was a model of formal reasoning), al-Khwārizmī (who developed algebra and gave his name to "algorithm") and European scholastic philosophers such as William of Ockham and Duns Scotus.[33]

Spanish philosopher Ramon Llull (1232–1315) developed several logical machines devoted to the production of knowledge by logical means;[34] Llull described his machines as mechanical entities that could combine basic and undeniable truths by simple logical operations, produced by the machine by mechanical meanings, in such ways as to produce all the possible knowledge.[35] Llull's work had a great influence on Gottfried Leibniz, who redeveloped his ideas.

In the 17th century, Leibniz, Thomas Hobbes and René Descartes explored the possibility that all rational thought could be made as systematic as algebra or geometry.[37] Hobbes famously wrote in Leviathan: "reason is nothing but reckoning".[38] Leibniz envisioned a universal language of reasoning, the characteristica universalis, which would reduce argumentation to calculation so that "there would be no more need of disputation between two philosophers than between two accountants. For it would suffice to take their pencils in hand, down to their slates, and to say each other (with a friend as witness, if they liked): Let us calculate."[39] These philosophers had begun to articulate the physical symbol system hypothesis that would become the guiding faith of AI research.

In the 20th century, the study of mathematical logic provided the essential breakthrough that made artificial intelligence seem plausible. The foundations had been set by such works as Boole's The Laws of Thought and Frege's Begriffsschrift. Building on Frege's system, Russell and Whitehead presented a formal treatment of the foundations of mathematics in their masterpiece, the Principia Mathematica in 1913. Inspired by Russell's success, David Hilbert challenged mathematicians of the 1920s and 30s to answer this fundamental question: "can all of mathematical reasoning be formalized?"[33] His question was answered by Gödel's incompleteness proof, Turing's machine and Church's Lambda calculus.

Their answer was surprising in two ways. First, they proved that there were, in fact, limits to what mathematical logic could accomplish. But second (and more important for AI) their work suggested that, within these limits, any form of mathematical reasoning could be mechanized. The Church-Turing thesis implied that a mechanical device, shuffling symbols as simple as 0 and 1, could imitate any conceivable process of mathematical deduction. The key insight was the Turing machine—a simple theoretical construct that captured the essence of abstract symbol manipulation.[42] This invention would inspire a handful of scientists to begin discussing the possibility of thinking machines.

Calculating machines were designed or built in antiquity and throughout history by many people, including Gottfried Leibniz,[44] Joseph Marie Jacquard,[45] Charles Babbage,[46] Percy Ludgate,[47] Leonardo Torres Quevedo,[48] Vannevar Bush,[49] and others. Ada Lovelace speculated that Babbage's machine was "a thinking or ... reasoning machine", but warned "It is desirable to guard against the possibility of exaggerated ideas that arise as to the powers" of the machine.[50][51]

The first modern computers were the massive machines of the Second World War (such as Konrad Zuse's Z3, Alan Turing's Heath Robinson and Colossus, Atanasoff and Berry's and ABC and ENIAC at the University of Pennsylvania).[52] ENIAC was based on the theoretical foundation laid by Alan Turing and developed by John von Neumann,[53] and proved to be the most influential.

In the 1940s and 50s, a handful of scientists from a variety of fields (mathematics, psychology, engineering, economics and political science) began to discuss the possibility of creating an artificial brain. Alan Turing was the first person to carry out substantial research in the field that he called Machine Intelligence.[1] The field of artificial intelligence research was founded as an academic discipline in 1956.[54]

The earliest research into thinking machines was inspired by a confluence of ideas that became prevalent in the late 1930s, 1940s, and early 1950s. Recent research in neurology had shown that the brain was an electrical network of neurons that fired in all-or-nothing pulses. Norbert Wiener's cybernetics described control and stability in electrical networks. Claude Shannon's information theory described digital signals (i.e., all-or-nothing signals). Alan Turing's theory of computation showed that any form of computation could be described digitally. The close relationship between these ideas suggested that it might be possible to construct an "electronic brain".[55] Experimental robots such as W. Grey Walter's turtles and the Johns Hopkins Beast, were built in the 1950s. These machines did not use computers, digital electronics or symbolic reasoning; they were controlled entirely by analog circuitry.[56]

Alan Turing was thinking about machine intelligence at least as early as 1941, when he circulated a paper on machine intelligence which could be the earliest paper in the field of AI - though it is now lost.[1] Walter Pitts and Warren McCulloch analyzed networks of idealized artificial neurons and showed how they might perform simple logical functions in 1943.[57][58] They were the first to describe what later researchers would call a neural network.[59] The paper was influenced by Turing's earlier paper 'On Computable Numbers' from 1936 using similar two-state boolean 'neurons', but was the first to apply it to neuronal function.[1] One of the students inspired by Pitts and McCulloch was a young Marvin Minsky, then a 24-year-old graduate student. In 1951 (with Dean Edmonds) he built the first neural net machine, the SNARC.[60] Minsky was to become one of the most important leaders and innovators in AI.

The term 'Machine Intelligence' was used by Alan Turing during his life which was later often referred to as 'Artificial Intelligence' after his death in 1954. In 1950 Turing published a landmark paper and the best known of his papers 'Computing Machinery and Intelligence', in which he speculated about the possibility of creating machines that think and the paper introduced his concept of what is now known as the Turing test to the general public.[61] He noted that "thinking" is difficult to define and devised his famous Turing Test.[62] If a machine could carry on a conversation (over a teleprinter) that was indistinguishable from a conversation with a human being, then it was reasonable to say that the machine was "thinking". This simplified version of the problem allowed Turing to argue convincingly that a "thinking machine" was at least plausible and the paper answered all the most common objections to the proposition.[63] The Turing Test was the first serious proposal in the philosophy of artificial intelligence. Then followed three radio broadcasts on AI by Turing, the lectures: 'Intelligent Machinery, A Heretical Theory', 'Can Digital Computers Think?' and the panel discussion 'Can Automatic Calculating Machines be Said to Think'. By 1956 computer intelligence had been actively pursued for more than a decade in Britain; the earliest AI programmes were written there in 1951–52.[1]

In 1951, using the Ferranti Mark 1 machine of the University of Manchester, Christopher Strachey wrote a checkers program and Dietrich Prinz wrote one for chess.[64] Arthur Samuel's checkers program, the subject of his 1959 paper "Some Studies in Machine Learning Using the Game of Checkers", eventually achieved sufficient skill to challenge a respectable amateur.[65] Game AI would continue to be used as a measure of progress in AI throughout its history.

When access to digital computers became possible in the middle fifties, a few scientists instinctively recognized that a machine that could manipulate numbers could also manipulate symbols and that the manipulation of symbols could well be the essence of human thought. This was a new approach to creating thinking machines.[66]

In 1955, Allen Newell and (future Nobel Laureate) Herbert A. Simon created the "Logic Theorist" (with help from J. C. Shaw). The program would eventually prove 38 of the first 52 theorems in Russell and Whitehead's Principia Mathematica, and find new and more elegant proofs for some.[67] Simon said that they had "solved the venerable mind/body problem, explaining how a system composed of matter can have the properties of mind."[68] (This was an early statement of the philosophical position John Searle would later call "Strong AI": that machines can contain minds just as human bodies do.)[69]

The term "Artificial Intelligence" itself was officially introduced by John McCarthy in 1956 during the Dartmouth Workshop, a pivotal event that marked the formal inception of AI as an academic discipline. The primary objective of this workshop was to delve into the possibilities of creating machines capable of simulating human intelligence, marking the commencement of a focused exploration into the realm of AI.[70]

The Dartmouth workshop of 1956[71] was organized by Marvin Minsky, John McCarthy and two senior scientists: Claude Shannon and Nathan Rochester of IBM. The proposal for the conference included this assertion: "every aspect of learning or any other feature of intelligence can be so precisely described that a machine can be made to simulate it".[72] The participants included Ray Solomonoff, Oliver Selfridge, Trenchard More, Arthur Samuel, Allen Newell and Herbert A. Simon, all of whom would create important programs during the first decades of AI research.[73] At the workshop Newell and Simon debuted the "Logic Theorist" and McCarthy persuaded the attendees to accept "Artificial Intelligence" as the name of the field.[74] (The term "Artificial Intelligence" was chosen by McCarthy to avoid associations with cybernetics and the influence of Norbert Wiener.)[75] The 1956 Dartmouth workshop was the moment that AI gained its name, its mission, its first success and its major players, and is widely considered the birth of AI.[76]

The programs developed in the years after the Dartmouth Workshop were, to most people, simply "astonishing":[77] computers were solving algebra word problems, proving theorems in geometry and learning to speak English. Few at the time would have believed that such "intelligent" behavior by machines was possible at all.[78] Researchers expressed an intense optimism in private and in print, predicting that a fully intelligent machine would be built in less than 20 years.[79] Government agencies like DARPA poured money into the new field.[80] Artificial Intelligence laboratories were set up at a number of British and US Universities in the latter 1950s and early 1960s.[1]